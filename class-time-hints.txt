HTML, CSS, JS
REACT
NODE,EXPRESS
MONGODB

3 WAYS -> Web, android, Desktop

Website       - low interaction of data
Web App       - high interaction of data


HTML:
    head
        ->title
        ->link
        ->style
    body
        ->header
        ->main
        ->footer

    Tags :

        <h1>  - </h6>, 
        <p>   - structure not considered,
        <pre> - structure/format considered,

        txt formating tags :
            <b></b>,<strong></strong> - bold
            <i></i>,<em></em>         - italic
            <mark> - highlight
            <sub>  - sub text
            <sup>  - super text
            <br>   - break
            <hr>   - horizontal line
            <marquee> - scroll automatic form right to left
            <u>       - underline
            <s>       - strike through
            <progress>- progress bar

        media :
            <img src="">
            <a href="" target="_blank">   - (hyper reference) redirect to some other destination

        list :

            <ul> - unordered list (bullet)
                <li> - list item

            <ol> - ordered list   (number)  (type="i" for roman)
                <li> - list item

            <dl> - description list
                <dt> - description term
                <dd> - description data
            
        table :
            <table>
                <tr> - table row
                    <th> - table header
                    <td> - table data
            
        forms:
        <input>     -> 24 types:
                            text, email, password, number, radio, checkbox, tel, date, month, week, url, submit, reset, search, image, file, 
                            color, datetimelocal, range, button, time, hidden.
        <label>    (Simple info display)
        <select>   (simple checkbox)
        <textarea> (data in wrapping)
        <button>   (button is button)
        <fieldset> (border)
        <legend>   (in the fieldset, right side corner contains a title)
        <datalist>
        <output>
        <option>   ()
        <optgroup>
        <map>
        <area>
        
        

    CSS:
        Universal selector  : *{}
        Element selector    : tag{}
        Class selector      : .class{}
        ID selector         : #id{}

        Way of writing CSS:
            Inline CSS
            Internal CSS
            External CSS <link rel="stylesheet" href="style.css">

    div:
        <div> - division
        <span> - inline division
        flex properties:
            flex-direction  -> row, column, row-reverse, column-reverse
            justify-content -> flex-start, flex-end, center (row)
            align-items     -> flex-start, flex-end, center (column)
            flex-wrap       -> wrap (exceeding elements wrapped by div)
            gap
            align-content   -> space-around , space-between 
    
    <audio muted control> <source src="" type="audio/mp3"> </audio>

    <video controls>
        <source src="" type="video/mp4">
    </video>

-------------------------------------------------------------------------------------------------

    css :
        translate          - moves element from original/ current position
        rotate
        scale-x, scale-y   - extend
        skew-x, skew-y
        matrix             - transform: matrix (rotate, scaleX(), skewY(), skewX(),scaleY(),translateX(),translateY())

        transition-timing-function  - ease, linear, ease-in, ease-out,  ease-in-out;
        transition-property

        animations:
            keyframes
            animation-name
            animtion-duration
            animation-delay
            animation-iteration-count
            animation-direction
            animation-timing-function
            animation-fill-mode
         
         video-crousel
         #move{
            width: 100%;
            height: 700px;
            background-color: black;
            overflow: auto auto;
            white-space: nowrap;
            padding: 1px;
         }
         #move.slide{
            display: inline-block;
         }





         task :
            all HTML tags
            all css properties (expecially flexbox, transform, transition, animation, form, gradient, text shadow, box shadow, media tags, iframe, youtube&map embedded link)
            hyoerlinks
            

    JAVASCRIPT:

        output statements :
                window.alert;
                Document.innerHTML;
                Document.write;
                console.log;

        getElementByID -> id
        getElementByClassname -> class
        querySelector -> queries

        .innerHTML
        .style       -> for styling


        Variable declaration: 
            var    - global
            let    - local
            const  - constant


msg box => {
    UI msg -> HTML;
    input box ;
    submit button;
    input type & submit and division which is content and it should be replicated below;
}

=> Necessary contents to learn today => timing functions (setInterval, clearInterval)
                                     -> API (axios, fetch)
                                     -> async & await function
                                            -> callback
                                            -> promises
                                                ->then
                                                ->catch
                                    -> graphics & canva 
                                    -> chart.js
                                    -> plotty package

API fetching steps :
    => import axios package
    => use url to fetch data
    => display

callback function -> function calling another function

async function => A -> so one time all operations
sync function  => One after the another


MONGODB commands :
    cls       -> clear database.

    CREATE DATABASE      : use DB;
    CREATE COLLECTION    : db.createCollection('name');
    RETRIEVE             : db.collection.find();
    SHOW DB & COLLECTION : show dbs, tables;
    INSERT TABLE         : db.sampleTable.insertOne({"Name":"Mahi","Branch":"CSE","Address":{"dist":"salem","state":"TN"}});
    FIND                :  db.sampleTable.find({"brand":{$in:["samsung","oneplus"]}});
                           db.sampleTable.find({"category":"mobile",$or:[{"qty":{$lt:10}},{"title":/^r/}]});
                           db.sampleTable.find({"category":"mobile",$or:[{"qty":{$lt:10}},{"title":{$regex:'^r'}}]});
                           db.simpleTable.find({"storage.ram":8,"storage.internal":64});
                           db.maths.aggregate([{$project:{sum:{$add:["$num1","$num2"]}}}]);
                           db.maths.aggregate([{$project:{mul:{$multiply:["$num1","$num2"]}}}]);
                           db.maths.aggregate([{$project:{div:{$divide:["$num1","$num2"]}}}]);
                           db.maths.aggregate([{$project:{fullname:{$concat:["$name1","$name2"]}}}]);
                           db.maths.aggregate([{$project:{fullname:{$toUpper:["$name1","$name2"]}}}]);
                           db.maths.aggregate([{$project:{fullname:{$substr:["$name1",0,2]}}}]);


REACT : 
            install node.

            "npm init" => fill the form / "npm init -y".

            "npm install react" / "npm i react"

            step 1 : open folder in VSCODE
            step 2 : open terminal "npx create-react-app project-name"
            step 3 : npm start
            